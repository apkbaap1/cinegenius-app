
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { ScriptAnalysis, ScheduleDay, Shot, ProductionBible, ContinuityAnalysis } from '../types';

// The import of 'jspdf-autotable' is intended to handle type augmentation.
// The manual 'declare module' block below was removed to resolve a module error.

interface PdfData {
    analysis: ScriptAnalysis;
    schedule: ScheduleDay[] | null;
    shots: Shot[];
    sceneGuides: Map<number, ProductionBible>;
    continuityReport: ContinuityAnalysis | null;
}

// Helper function to add headers
const addHeader = (doc: jsPDF, title: string) => {
    doc.setFontSize(18);
    doc.setTextColor('#4f46e5');
    doc.text(title, 14, 20);
};

// Helper function for page breaks
const addPageIfNeeded = (doc: jsPDF, currentY: number) => {
    if (currentY > 260) {
        doc.addPage();
        return 20;
    }
    return currentY;
};

export const downloadAnalysisAsPDF = async ({ analysis, schedule, shots, sceneGuides, continuityReport }: PdfData) => {
    const doc = new jsPDF();

    // --- TITLE PAGE ---
    doc.setFontSize(26);
    doc.setTextColor('#ffffff');
    doc.setFillColor('#1f2937');
    doc.rect(0, 0, 210, 297, 'F');
    doc.setTextColor('#d1d5db');
    doc.setFontSize(32);
    doc.text(analysis.title, doc.internal.pageSize.getWidth() / 2, 130, { align: 'center' });
    doc.setFontSize(14);
    doc.text(analysis.logline, doc.internal.pageSize.getWidth() / 2, 150, { align: 'center', maxWidth: 160 });
    doc.setFontSize(10);
    doc.text('Generated by CineGenius', doc.internal.pageSize.getWidth() / 2, 280, { align: 'center' });


    // --- SCENE BREAKDOWN ---
    doc.addPage();
    addHeader(doc, 'Scene Breakdown');
    (doc as any).autoTable({
        startY: 30,
        head: [['#', 'Setting', 'Pages', 'Characters', 'Summary']],
        body: analysis.scenes.map(s => [s.sceneNumber, `${s.setting}, ${s.timeOfDay}`, s.pages, s.characters.join(', '), s.summary]),
        theme: 'grid',
        headStyles: { fillColor: '#4f46e5' },
        styles: { cellPadding: 2, fontSize: 8 },
        columnStyles: { 4: { cellWidth: 'auto' } },
    });

    // --- CHARACTER LIST ---
    doc.addPage();
    addHeader(doc, 'Character List');
    (doc as any).autoTable({
        startY: 30,
        head: [['Name', 'Description']],
        body: analysis.characters.map(c => [c.name, c.description]),
        theme: 'grid',
        headStyles: { fillColor: '#4f46e5' },
        styles: { cellPadding: 2, fontSize: 9 },
    });

    // --- SHOOTING SCHEDULE ---
    if (schedule && schedule.length > 0) {
        doc.addPage();
        addHeader(doc, 'Shooting Schedule');
        let scheduleY = 30;
        schedule.forEach(day => {
            scheduleY = addPageIfNeeded(doc, scheduleY);
            (doc as any).autoTable({
                startY: scheduleY,
                head: [[`DAY ${day.day} - ${day.date} - ${day.notes}`]],
                headStyles: { fillColor: '#7c3aed' },
                theme: 'plain',
            });
            (doc as any).autoTable({
                head: [['Scene', 'Setting', 'Pages', 'Summary']],
                body: day.scenes.map(s => [s.sceneNumber, s.setting, s.pages, s.summary]),
                theme: 'grid',
                headStyles: { fillColor: '#4f46e5' },
                styles: { cellPadding: 2, fontSize: 8 },
            });
            scheduleY = (doc as any).lastAutoTable.finalY + 10;
        });
    }

    // --- CONTINUITY REPORT ---
    if (continuityReport) {
        const { characterContinuity, costumeContinuity, editingContinuity } = continuityReport;
        if (characterContinuity.length > 0 || costumeContinuity.length > 0 || editingContinuity.length > 0) {
            doc.addPage();
            addHeader(doc, 'Continuity Report');
            let continuityY = 30;

            const addContinuitySection = (title: string, items: any[], formatItem: (item: any) => string[]) => {
                if (items && items.length > 0) {
                    continuityY = addPageIfNeeded(doc, continuityY);
                    doc.setFontSize(14);
                    doc.setTextColor('#7c3aed');
                    doc.text(title, 14, continuityY);
                    continuityY += 5;
                    (doc as any).autoTable({
                        startY: continuityY,
                        body: items.map(formatItem),
                        theme: 'plain',
                        styles: { fontSize: 9, cellPadding: 2 },
                        columnStyles: { 0: { fontStyle: 'bold' } },
                    });
                    continuityY = (doc as any).lastAutoTable.finalY + 10;
                }
            };
            
            addContinuitySection('Character Continuity', characterContinuity, item => [
                `Scene ${item.sceneNumber} - ${item.character}`,
                item.issue
            ]);

            addContinuitySection('Costume Continuity', costumeContinuity, item => [
                `${item.character} (Scenes: ${item.sceneNumbers.join(', ')})`,
                item.issue
            ]);
            
            addContinuitySection('Editing & Shot Flow', editingContinuity, item => [
                `Between Scenes: ${item.sceneNumbers.join(' & ')}`,
                `Issue: ${item.issue}\nSuggestion: ${item.suggestion}`
            ]);
        }
    }

    // --- PRODUCTION BIBLE ---
    if (sceneGuides && sceneGuides.size > 0) {
        doc.addPage();
        addHeader(doc, 'Production Guides by Scene');
        let currentY = 30;

        const addBibleSubSection = (doc: jsPDF, title: string, items: any[], formatItem: (item: any) => {title: string, body: string}, startY: number): number => {
            let y = startY;
            if (items && items.length > 0) {
                y = addPageIfNeeded(doc, y);
                doc.setFontSize(12);
                doc.setTextColor('#7c3aed');
                doc.text(title, 14, y);
                y += 8;

                for (const item of items) {
                    y = addPageIfNeeded(doc, y);
                    const { title: itemTitle, body } = formatItem(item);

                    doc.setFontSize(10).setTextColor('#374151').setFont(undefined, 'bold');
                    const titleLines = doc.splitTextToSize(itemTitle, 180);
                    doc.text(titleLines, 16, y);
                    y += (titleLines.length * 4);
                    
                    y = addPageIfNeeded(doc, y);
                    doc.setFontSize(9).setTextColor('#374151').setFont(undefined, 'normal');
                    const bodyLines = doc.splitTextToSize(body, 180);
                    doc.text(bodyLines, 16, y);
                    y += (bodyLines.length * 4) + 5;
                }
            }
            return y;
        };

        const sortedSceneNumbers = Array.from(sceneGuides.keys()).sort((a, b) => a - b);
        
        for (const sceneNumber of sortedSceneNumbers) {
            const productionBible = sceneGuides.get(sceneNumber);
            if (productionBible) {
                currentY = addPageIfNeeded(doc, currentY);
                doc.setFillColor('#f3f4f6');
                doc.rect(12, currentY - 5, 186, 10, 'F');
                doc.setFontSize(16);
                doc.setTextColor('#1f2937');
                doc.text(`Guide for Scene ${sceneNumber}`, 14, currentY);
                currentY += 12;

                currentY = addBibleSubSection(doc, 'Camera & Lenses', productionBible.camera, i => ({ title: i.recommendation, body: i.reasoning }), currentY);
                currentY = addBibleSubSection(doc, 'Art Department', productionBible.art, i => ({ title: i.prop, body: i.description }), currentY);
                currentY = addBibleSubSection(doc, 'Lighting', productionBible.lighting, i => ({ title: `${i.setup} (${i.mood})`, body: i.details }), currentY);
                currentY = addBibleSubSection(doc, 'Costumes', productionBible.costumes, i => ({ title: `${i.character}: ${i.costume}`, body: `Inspiration: ${i.inspiration}` }), currentY);
                
                currentY += 5; // Add space between scenes
            }
        }
    }


    // --- STORYBOARD ---
    if (shots && shots.length > 0) {
        doc.addPage();
        addHeader(doc, 'Storyboard');
        let y = 30;
        const pageHeight = doc.internal.pageSize.height;
        const imgWidth = 80;
        const imgHeight = (imgWidth * 9) / 16; // 16:9 aspect ratio

        for (const shot of shots) {
            if (y + imgHeight + 30 > pageHeight) {
                doc.addPage();
                y = 20;
            }
            if (shot.imageUrl && shot.imageUrl !== 'error' && shot.imageUrl.startsWith('data:image')) {
                 try {
                    doc.addImage(shot.imageUrl, 'JPEG', 15, y, imgWidth, imgHeight);
                } catch (e) {
                    doc.text("Image could not be added.", 15, y + imgHeight / 2);
                    console.error("PDF generation: Could not add image", e);
                }
            } else {
                 doc.text("Image not available.", 15, y + imgHeight / 2);
            }

            doc.setFontSize(11).setTextColor('#374151').setFont(undefined, 'bold');
            doc.text(`Shot ${shot.shotNumber}: ${shot.shotType} | ${shot.lens}`, 105, y + 5);
            doc.setFontSize(9).setFont(undefined, 'normal');
            const descriptionLines = doc.splitTextToSize(shot.description, 90);
            doc.text(descriptionLines, 105, y + 12);

            y += imgHeight + 10;
        }
    }


    doc.save(`${analysis.title.replace(/\s+/g, '_')}_CineGenius_Analysis.pdf`);
};
